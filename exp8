import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sys
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
# loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('dataset.csv')
# print first 5 rows of the dataset
heart_data.head()
# print last 5 rows of the dataset
heart_data.tail()
# number of rows and columns in the dataset
heart_data.shape
# getting some info about the data
heart_data.info()
# checking for missing values
heart_data.isnull().sum()
# statistical measures about the data
heart_data.describe()
# checking the distribution of Target Variable
heart_data['target'].value_counts()
import seaborn as sns
#get correlations of each features in dataset
corrmat = heart_data.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(20,20))
#plot heat map
g=sns.heatmap(heart_data[top_corr_features].corr(),annot=True,cmap="RdYlGn")
heart_data.hist()
X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']
print(X)
print(Y)
#Splitting the Data into Training data & Test Data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)
print(X.shape, X_train.shape, X_test.shape)
#Model Training-Logistics regression
model = LogisticRegression()
# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)
#Model evaluation- accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy on Training data : ', training_data_accuracy)
# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy on Test data : ', test_data_accuracy)
#Building a predictive system
input_data=()
val=int(input('Enter age of the patient:'))
if(val>0):
    input_data=(val,)
else:
    print('Invalid age input')
    sys.exit()
val=int(input('Enter sex of the patient:'))
if(val==1 or val==0):
    input_data+=(val,)
else:
    print('Invalid sex input')
    sys.exit()
val=int(input('Enter chest pain values of the patient:'))
if(val==0 or val==1 or val==2 or val==3):
    input_data+=(val,)
else:
    print('Invalid chest pain input')
    sys.exit()
val=int(input('Enter resting blood pressure values of the patient:'))
if(val>0):
    input_data+=(val,)
else:
    print('Invalid resting blood pressure input')
    sys.exit()
val=int(input('Enter serum cholesterol values of the patient:'))
if(val>0):
    input_data+=(val,)
else:
    print('Invalid serum cholesterol input')
    sys.exit()
val=int(input('Enter fasting blood sugar values of the patient:'))
if(val==0 or val==1):
    input_data+=(val,)
else:
    print('Invalid fasting blood sugar input')
    sys.exit()
val=int(input('Enter resting ECG results of the patient:'))
if(val==0 or val==1):
    input_data+=(val,)
else:
    print('Invalid resting ECG results input')
    sys.exit()
val=int(input('Enter thalach of the patient:'))
if(val>0):
    input_data+=(val,)
else:
    print('Invalid thalach input')
    sys.exit()
val=int(input('Enter exang values of the patient:'))
if(val==0 or val==1):
    input_data+=(val,)
else:
    print('Invalid exang input')
    sys.exit()
val=float(input('Enter oldpeak values of the patient:'))
input_data+=(val,)
val=int(input('Enter slope values of the patient:'))
if(val==0 or val==1 or val==2):
    input_data+=(val,)
else:
    print('Invalid slope input')
    sys.exit()
val=int(input('Enter number of major vessels of the patient:'))
if(val==0 or val==1 or val==2 or val==3 or val==4):
    input_data+=(val,)
else:
    print('Invalid ca input')
    sys.exit()
val=int(input('Enter defect values of the patient:'))
if(val==0 or val==1 or val==2 or val==3):
    input_data+=(val,)
else:
    print('Invalid defect value input')
    sys.exit()
# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)
# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)
if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')
